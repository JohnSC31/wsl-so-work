package main

import (
	"bufio"
	"fmt"
	"http-servidor/utils"
	"io"
	"log"
	"net"
	"net/http"
	"strings"
	"sync"
	"time"
)

const (
	DispatcherPort      = ":8080"
	HealthCheckInterval = 10 * time.Second
	WorkerTimeout       = 10 * time.Second
	EstrategiaRed       = 1 //cambiar a 2 si se quiere usar least loaded
	primero             = 1 // Usar round robin para seleccionar el primer worker
	IdentificadorWorker = 0 // Identificador del worker para el health check
)

var workers = make(map[string]Worker)
var mutex = &sync.Mutex{}

type Dispatcher struct {
	ID			 	int
	Workers         []*Worker
	TasksChan       chan *Task
	Tasks           sync.Map // Concurrent map para tareas activas [taskID]*Task
	Listener        net.Listener
	Mu              sync.RWMutex
	DoneChan        chan struct{}
	Commands        []string // Pool de workers por comando
	Metrics         *DispatcherMetrics
	lastWorkerIndex int

}

type DispatcherMetrics struct {
	RequestsHandled   int
	RequestsFailed    int
	TotalRequests     int
	WorkersRegistered int
	StartTime         time.Time

	mu sync.Mutex
}


// Estructura para la respuesta de conteo de palabras de un worker (reutilizada para Pi)
type WorkerResult struct { // Renombrada para ser más genérica
	WorkerID string
	Count    int   // Puede ser wordCount o pointsInCircle
	Error    error
}


// inicializa el dispatcher y los workers
func newDispatcher() *Dispatcher {
	print("Inicializando Dispatcher...\n")
	metrics := &DispatcherMetrics{
		StartTime:         time.Now(),
		RequestsHandled:   0,
		RequestsFailed:    0,
		TotalRequests:     0,
		WorkersRegistered: 0,
	}

	dispatcher := &Dispatcher{
		ID:         1, // ID del dispatcher
		Workers:   make([]*Worker, 0),
		TasksChan: make(chan *Task, 1000), // Canal para recibir tareas
		DoneChan:  make(chan struct{}),
		Commands: []string{
			"/help",
			"/timestamp",
			"/fibonacci",
			"/createfile",
			"/deletefile",
			"/reverse",
			"/toupper",
			"/random",
			"/hash",
			"/simulate",
			"/sleep",
			"/loadtest",
			"/wordcount", // Nuevo comando para conteo de palabras
		},
		Metrics: metrics,
	}

	return dispatcher
}

// maneja la conexion, crea la nueva tarea, asigan la nueva tarea y envia la solicitud al servidor del worker
func (d *Dispatcher) HandleConnection(conn net.Conn) {

	print("Nueva conexión aceptada\n")
	defer conn.Close()

	// Utiliza bufio.Reader para leer la solicitud línea por línea de forma eficiente
	reader := bufio.NewReader(conn)

	// Leer la primera línea de la solicitud (e.g., "GET /path HTTP/1.1")
	requestLine, err := reader.ReadString('\n')
	if err != nil {
		log.Printf("Error leyendo request line: %v", err)
		utils.SendResponse(conn, "400 Bad Request", "Error leyendo la solicitud HTTP")
		return
	}

	method, path := utils.ParseRequestLine(requestLine)

	route, params := utils.ParseRoute(path)
	
	if route == "/suscribir" {
		
		log.Println("Recibida solicitud de suscripción de worker.")
		d.suscribirHandler(conn, params) // Pasamos nil porque no estamos usando el request completo
		return
	}
	if route == "/workers" {
		workerStatus(conn, d)
		return
	}

	// Leer los encabezados HTTP
	headers := make(map[string]string)
	for {
		line, err := reader.ReadString('\n')
		if err != nil {
			log.Printf("Error leyendo headers: %v", err)
			utils.SendResponse(conn, "400 Bad Request", "Error leyendo encabezados HTTP")
			return
		}
		if strings.TrimSpace(line) == "" { // Línea vacía indica fin de encabezados
			break
		}
		parts := strings.SplitN(line, ":", 2)
		if len(parts) == 2 {
			key := strings.TrimSpace(parts[0])
			value := strings.TrimSpace(parts[1])
			headers[key] = value
		}
	}
	
	// Sumar a las metricas
	d.Metrics.mu.Lock()
	d.Metrics.TotalRequests++
	d.Metrics.mu.Unlock()


	if route == "/countwords" && method == "POST" {
		log.Println("Received /countwords POST request.")
		d.handleWordCount(conn, method, route, params, headers, reader)
		return 
	}

	// Cálculo de Pi (GET con parámetros)
	if route == "/calculatepi" && method == "GET" {
		log.Println("Received /calculatepi GET request.")
		d.handleCalculatePi(conn, params)
		return
	}

	if method != "GET" {
		utils.SendResponse(conn, "405 Method Not Allowed", "Solo se permite GET y POST")
		return
	}

	newRequest := Request{
		Method: method,
		Path:   route,
		Params: params,
		Done:   make(chan bool),
	}

	newTask := Task{
		ID:         d.Metrics.TotalRequests,
		Conn:       conn,
		Request:    &newRequest,
		Response:   nil,
		Status:     TaskPending,
		CreatedAt:  time.Now(),
		RetryCount: 0,
		Content:    "",
	}

	// agregar la tarea al canal de tareas
	// Eliminarlo al obtener la respuesta para evitar que sea reenviada por el health check

	worker := seleccionarWorker(d)
	if worker == nil {
		utils.SendResponse(conn, "503 Service Unavailable", "No hay workers disponibles")
		d.Metrics.mu.Lock()
		d.Metrics.RequestsFailed++
		d.Metrics.mu.Unlock()
		return
	}

	path = worker.URL + route
	print("Ruta del worker: ", path, "\n")

	if !d.checkWorkerStatus(worker) {
        log.Printf("Worker %d (%s) marcado como inactivo", worker.ID, worker.URL)
		log.Printf("Cantidad de %s tareas pendientes del worker %d", len(worker.taskQueue), worker.ID)
		d.redistributeTasks(worker)
        utils.SendResponse(conn, "503 Service Unavailable", "Worker no disponible")
        return
    }

	
	log.Printf("Enviando tarea %s a worker %d (%s)", newTask.ID, worker.ID, worker.URL)

	worker.taskQueue <- &newTask

	worker.mu.Lock()
	worker.CompletedTasks++ // Incrementamos la carga del worker
	worker.activeTasks++ // Incrementamos el contador de tareas activas
	worker.mu.Unlock()

	log.Printf("Tareas %s asignadas al worker %d", len(worker.taskQueue), worker.ID)
	err = d.sendToWorker(worker, &newTask)
	if err != nil {
		log.Printf("Error enviando tarea a worker %d: %v", worker.ID, err)
		// Volver a verificar estado
        if !d.checkWorkerStatus(worker) {
            // Redistribuir tareas pendientes si es necesario
            d.redistributeTasks(worker)
        }
		conn.Write([]byte("HTTP/1.1 502 Bad Gateway\r\n\r\nError al comunicarse con el worker"))
		return
	}

	//log.Printf("respuesta enviada al cliente para tarea %s", newTask.Response)
	//taskFinalizada := <-worker.taskQueue
	worker.mu.Lock()
	worker.activeTasks-- // Decrementamos el contador de tareas activas
	worker.mu.Unlock()
	//log.Printf("Tarea %s completada por worker %d y sacada de la cola", taskFinalizada.ID, worker.ID)
	utils.SendResponse(conn, "200 OK", string(newTask.Response))
	log.Printf("Tarea %s completada por worker %d", newTask.ID, worker.ID)
	worker.cleanCompletedTasks() // Limpiar tareas completadas del worker

}

// revisa si el endpoint existe
func (d *Dispatcher) isValidRoute(route string) bool {
	for _, cmd := range d.Commands {
		if route == cmd {
			return true
		}
	}
	return false
}

func (d *Dispatcher) sendToWorker(worker *Worker, task *Task) error {
	// Construir URL
	url := fmt.Sprintf("http://%s%s", worker.URL, task.Request.Path)

	// Crear solicitud HTTP
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return fmt.Errorf("error creando request: %v", err)
	}

	// Añadir parámetros
	q := req.URL.Query()
	for key, value := range task.Request.Params {
		q.Add(key, value)
	}
	req.URL.RawQuery = q.Encode()

	// Configurar headers
	req.Header.Set("Host", worker.URL)
	req.Header.Set("X-Request-ID", fmt.Sprintf("%d", task.ID))

	// Bloquear worker para actualizar estado
	worker.mu.Lock()
	//worker.activeTasks++
	task.Status = TaskProcessing
	worker.mu.Unlock()

	// Enviar solicitud con timeout
	client := &http.Client{Timeout: 5 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		worker.mu.Lock()
		worker.activeTasks--
		worker.mu.Unlock()
		
		return fmt.Errorf("error enviando a worker: %v", err)
	}
	defer resp.Body.Close()

	var responseBuilder strings.Builder
	responseBuilder.WriteString(fmt.Sprintf("HTTP/1.1 %d %s\r\n", resp.StatusCode, resp.Status))

	for k, v := range resp.Header {
		responseBuilder.WriteString(fmt.Sprintf("%s: %s\r\n", k, strings.Join(v, ", ")))
	}
	responseBuilder.WriteString("\r\n") // separa headers del body

	// Leer la respuesta completa
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("error leyendo respuesta: %v", err)
	}
	responseBuilder.Write(body)

	// Guardar la respuesta en la tarea
	fullResponse := responseBuilder.String()
	task.Response = []byte(fullResponse)
	

	worker.mu.Lock()
	task.Response = body
	task.Status = TaskCompleted
	task.CompletedAt = time.Now()
	//worker.activeTasks--
	worker.mu.Unlock()

	_, err = task.Conn.Write([]byte(fullResponse))
	if err != nil {
		return fmt.Errorf("error escribiendo al cliente: %v", err)
	}

	// Forzar flush si es necesario
	if conn, ok := task.Conn.(interface{ Flush() error }); ok {
		conn.Flush()
	}

	return nil
}


func (w *Worker) cleanCompletedTasks() {
    w.mu.Lock()
    defer w.mu.Unlock()
    
    // Limpiar queue sin bloquear
    for {
        select {
        case <-w.taskQueue:
            // Simplemente vaciar
        default:
            return
        }
    }
}


// Envía una solicitud POST HTTP manual a un worker con el comando y el cuerpo de contenido.
// Retorna el cuerpo de la respuesta del worker o un error.
func (d *Dispatcher) sendPostToWorker(worker *Worker, command string, content string) (string, error) {
	workerHost := strings.Split(worker.URL, ":")[0] // Obtener solo el host para el header Host
	// workerPort := strings.Split(worker.URL, ":")[1] // Obtener el puerto

	requestBody := []byte(content)
	requestHeaders := []string{
		fmt.Sprintf("POST %s HTTP/1.1", command),
		fmt.Sprintf("Host: %s", workerHost),
		fmt.Sprintf("Content-Type: text/plain"),
		fmt.Sprintf("Content-Length: %d", len(requestBody)),
		"Connection: close", // Indicar al worker que cierre la conexión después de la respuesta
		"",                  // Línea vacía para separar headers del body
	}
	fullRequest := strings.Join(requestHeaders, "\r\n") + "\r\n" + string(requestBody)

	log.Printf("Full request (%s)", fullRequest)

	// Bloquear worker para actualizar estado (esto se gestionará a un nivel superior si es una "tarea" general)
	// Aquí solo estamos enviando la solicitud, la gestión de activeTasks del worker
	// se hará en el handleWordCount o en un nivel de orquestación de tareas más general si se crea.
	// Por ahora, lo mantenemos simple para esta función específica de comunicación.

	// Establecer conexión TCP con el worker
	workerConn, err := net.DialTimeout("tcp", worker.URL, WorkerTimeout)
	if err != nil {
		return "", fmt.Errorf("error conectando a worker %s: %w", worker.URL, err)
	}
	defer workerConn.Close()

	// Enviar la solicitud HTTP al worker
	_, err = workerConn.Write([]byte(fullRequest))
	if err != nil {
		return "", fmt.Errorf("error enviando solicitud a worker %s: %w", worker.URL, err)
	}

	// Leer la respuesta del worker
	workerReader := bufio.NewReader(workerConn)
	responseStatusLine, err := workerReader.ReadString('\n')
	if err != nil {
		return "", fmt.Errorf("error leyendo status line de worker %s: %w", worker.URL, err)
	}
	if !strings.Contains(responseStatusLine, "200 OK") {
		// Leer el resto de la respuesta para el log de error
		responseBody, _ := io.ReadAll(workerReader)
		return "", fmt.Errorf("worker %s retornó status no OK: %s - %s", worker.URL, strings.TrimSpace(responseStatusLine), string(responseBody))
	}

	// Leer y descartar headers del worker
	for {
		line, err := workerReader.ReadString('\n')
		if err != nil {
			return "", fmt.Errorf("error leyendo headers de worker %s: %w", worker.URL, err)
		}
		if strings.TrimSpace(line) == "" {
			break // Fin de los headers
		}
	}

	log.Printf("Before reading the body of worker %s", worker.URL)

	// Leer el cuerpo de la respuesta (el conteo de palabras)
	wordCountBody, err := io.ReadAll(workerReader)
	if err != nil {
		return "", fmt.Errorf("error leyendo body de worker %s: %w", worker.URL, err)
	}

	log.Printf("Result worker %s: %d", worker.URL, wordCountBody)

	return strings.TrimSpace(string(wordCountBody)), nil
}



// sendGetToWorker: Nueva función para enviar solicitudes GET manuales a un worker.
// Retorna el cuerpo de la respuesta del worker o un error.
func (d *Dispatcher) sendGetToWorker(worker *Worker, command string, params map[string]string) (string, error) {
	workerHost := strings.Split(worker.URL, ":")[0]

	// Construir los parámetros de la URL
	queryParams := ""
	if len(params) > 0 {
		var q []string
		for k, v := range params {
			q = append(q, fmt.Sprintf("%s=%s", k, v))
		}
		queryParams = "?" + strings.Join(q, "&")
	}

	requestHeaders := []string{
		fmt.Sprintf("GET %s%s HTTP/1.1", command, queryParams),
		fmt.Sprintf("Host: %s", workerHost),
		"Connection: close", // Indicar al worker que cierre la conexión después de la respuesta
		"",                  // Línea vacía final para separar headers del body (aunque no hay body en GET)
	}
	fullRequest := strings.Join(requestHeaders, "\r\n") + "\r\n"

	workerConn, err := net.DialTimeout("tcp", worker.URL, WorkerTimeout)
	if err != nil {
		return "", fmt.Errorf("error conectando a worker %s: %w", worker.URL, err)
	}
	defer workerConn.Close()

	_, err = workerConn.Write([]byte(fullRequest))
	if err != nil {
		return "", fmt.Errorf("error enviando solicitud GET a worker %s: %w", worker.URL, err)
	}

	workerReader := bufio.NewReader(workerConn)
	responseStatusLine, err := workerReader.ReadString('\n')
	if err != nil {
		return "", fmt.Errorf("error leyendo status line de worker %s: %w", worker.URL, err)
	}
	if !strings.Contains(responseStatusLine, "200 OK") {
		responseBody, _ := io.ReadAll(workerReader)
		return "", fmt.Errorf("worker %s retornó status no OK: %s - %s", worker.URL, strings.TrimSpace(responseStatusLine), string(responseBody))
	}

	// Leer y descartar headers del worker
	for {
		line, err := workerReader.ReadString('\n')
		if err != nil {
			return "", fmt.Errorf("error leyendo headers de worker %s: %w", worker.URL, err)
		}
		if strings.TrimSpace(line) == "" {
			break // Fin de los headers
		}
	}

	// Leer el cuerpo de la respuesta (el resultado del cálculo)
	responseBody, err := io.ReadAll(workerReader)
	if err != nil {
		return "", fmt.Errorf("error leyendo body de worker %s: %w", worker.URL, err)
	}

	return strings.TrimSpace(string(responseBody)), nil

}

